{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\nimport setAuthToken from \"../../Utils/setAuthToken\";\nconst initialState = {\n  email: \"\",\n  password: \"\",\n  currentUser: null,\n  error: null\n};\nconst LoginSlice = createSlice({\n  name: \"login\",\n  initialState,\n  reducers: {\n    setField: (state, action) => {\n      const {\n        field,\n        value\n      } = action.payload;\n      state[field] = value;\n    },\n    loginSuccess: (state, action) => {\n      state.error = null;\n      if (action) {\n        const {\n          currentUser\n        } = action.payload;\n        state.currentUser = currentUser;\n      }\n    },\n    loginFailure: (state, action) => {\n      state.error = action.payload;\n    },\n    logout: state => {\n      state.email = \"\";\n      state.password = \"\";\n      state.error = null;\n    }\n  }\n});\nexport const {\n  setField,\n  loginSuccess,\n  loginFailure,\n  logout\n} = LoginSlice.actions;\nexport const loadUser = () => async dispatch => {\n  try {\n    const token = localStorage.getItem(\"token\");\n    if (token) {\n      setAuthToken(token);\n    }\n    const res = await axios.get(\"/api/auth\");\n    console.log(\"Response data:\", res.data); // Output the response data\n    // console.log(res.data._id)\n    // dispatch(loginSuccess(res.data._id));\n    console.log(\"User loaded\", res.data);\n  } catch (err) {\n    console.log(err.response);\n  }\n};\nexport const loginUser = loginUser => async dispatch => {\n  try {\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    };\n    const body = JSON.stringify(loginUser);\n    console.log(\"111111111111111\");\n    const res = await axios.post(\"/api/auth\", body, config);\n    console.log(\"222222222222222\");\n    dispatch(loginSuccess());\n    console.log(\"333333333333333\");\n    localStorage.setItem(\"token\", res.data.token);\n    setAuthToken(res.data.token);\n    dispatch(loadUser());\n  } catch (err) {\n    dispatch(loginFailure(err.response.data));\n  }\n};\nexport const logoutUser = () => async dispatch => {\n  try {\n    localStorage.removeItem(\"token\");\n    setAuthToken(null);\n    dispatch(logout());\n  } catch (err) {\n    console.error(err);\n  }\n};\n\n// ... other thunks ...\n// You can add more thunks for updating profile, creating posts, etc.\n\nexport default LoginSlice.reducer;","map":{"version":3,"names":["createSlice","axios","setAuthToken","initialState","email","password","currentUser","error","LoginSlice","name","reducers","setField","state","action","field","value","payload","loginSuccess","loginFailure","logout","actions","loadUser","dispatch","token","localStorage","getItem","res","get","console","log","data","err","response","loginUser","config","headers","body","JSON","stringify","post","setItem","logoutUser","removeItem","reducer"],"sources":["C:/Users/wangz/OneDrive/文档/GitHub/Kitten/frontend/src/Redux/Reducers/LoginSlice.js"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\nimport axios from \"axios\";\r\nimport setAuthToken from \"../../Utils/setAuthToken\";\r\n\r\nconst initialState = {\r\n  email: \"\",\r\n  password: \"\",\r\n  currentUser: null,\r\n  error: null,\r\n};\r\n\r\nconst LoginSlice = createSlice({\r\n  name: \"login\",\r\n  initialState,\r\n  reducers: {\r\n    setField: (state, action) => {\r\n      const { field, value } = action.payload;\r\n      state[field] = value;\r\n    },\r\n    loginSuccess: (state, action) => {\r\n      state.error = null;\r\n      if (action) {\r\n        const { currentUser } = action.payload;\r\n        state.currentUser = currentUser;\r\n      }\r\n    },\r\n    loginFailure: (state, action) => {\r\n      state.error = action.payload;\r\n    },\r\n    logout: (state) => {\r\n      state.email = \"\";\r\n      state.password = \"\";\r\n      state.error = null;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { setField, loginSuccess, loginFailure, logout } =\r\n  LoginSlice.actions;\r\n\r\nexport const loadUser = () => async (dispatch) => {\r\n  try {\r\n    const token = localStorage.getItem(\"token\");\r\n    if (token) {\r\n      setAuthToken(token);\r\n    }\r\n    const res = await axios.get(\"/api/auth\");\r\n    console.log(\"Response data:\", res.data); // Output the response data\r\n    // console.log(res.data._id)\r\n    // dispatch(loginSuccess(res.data._id));\r\n    console.log(\"User loaded\", res.data);\r\n  } catch (err) {\r\n    console.log(err.response);\r\n  }\r\n};\r\n\r\nexport const loginUser = (loginUser) => async (dispatch) => {\r\n  try {\r\n    const config = { headers: { \"Content-Type\": \"application/json\" } };\r\n    const body = JSON.stringify(loginUser);\r\n    console.log(\"111111111111111\");\r\n    const res = await axios.post(\"/api/auth\", body, config);\r\n    console.log(\"222222222222222\");\r\n    dispatch(loginSuccess());\r\n    console.log(\"333333333333333\");\r\n    localStorage.setItem(\"token\", res.data.token);\r\n    setAuthToken(res.data.token);\r\n    dispatch(loadUser());\r\n  } catch (err) {\r\n    dispatch(loginFailure(err.response.data));\r\n  }\r\n};\r\n\r\nexport const logoutUser = () => async (dispatch) => {\r\n  try {\r\n    localStorage.removeItem(\"token\");\r\n    setAuthToken(null);\r\n    dispatch(logout());\r\n  } catch (err) {\r\n    console.error(err);\r\n  }\r\n};\r\n\r\n// ... other thunks ...\r\n// You can add more thunks for updating profile, creating posts, etc.\r\n\r\nexport default LoginSlice.reducer;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}