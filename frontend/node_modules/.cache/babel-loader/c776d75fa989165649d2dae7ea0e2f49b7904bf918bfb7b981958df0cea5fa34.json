{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\nconst initialState = {\n  name: \"\",\n  email: \"\",\n  password: \"\",\n  password2: \"\",\n  error: null\n};\nconst RegisterSlice = createSlice({\n  name: \"register\",\n  initialState,\n  reducers: {\n    setField: (state, action) => {\n      const {\n        field,\n        value\n      } = action.payload;\n      state[field] = value;\n    },\n    registrationSuccess: state => {\n      state.error = null;\n    },\n    registrationFailure: (state, action) => {\n      state.error = action.payload;\n    }\n  }\n});\nexport const {\n  setField,\n  registrationSuccess,\n  registrationFailure\n} = RegisterSlice.actions;\nexport const registerUser = newUser => async dispatch => {\n  try {\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    };\n    const body = JSON.stringify(newUser);\n    await axios.post(\"/api/users\", body, config);\n    dispatch(registrationSuccess());\n  } catch (err) {\n    dispatch(registrationFailure(err.response.data));\n  }\n};\nexport default RegisterSlice.reducer;","map":{"version":3,"names":["createSlice","axios","initialState","name","email","password","password2","error","RegisterSlice","reducers","setField","state","action","field","value","payload","registrationSuccess","registrationFailure","actions","registerUser","newUser","dispatch","config","headers","body","JSON","stringify","post","err","response","data","reducer"],"sources":["C:/Users/wangz/OneDrive/文档/GitHub/Kitten/frontend/src/Redux/Reducers/RegisterSlice.js"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\nimport axios from \"axios\";\r\n\r\nconst initialState = {\r\n  name: \"\",\r\n  email: \"\",\r\n  password: \"\",\r\n  password2: \"\",\r\n  error: null,\r\n};\r\n\r\nconst RegisterSlice = createSlice({\r\n  name: \"register\",\r\n  initialState,\r\n  reducers: {\r\n    setField: (state, action) => {\r\n      const { field, value } = action.payload;\r\n      state[field] = value;\r\n    },\r\n    registrationSuccess: (state) => {\r\n      state.error = null;\r\n    },\r\n    registrationFailure: (state, action) => {\r\n      state.error = action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { setField, registrationSuccess, registrationFailure } = RegisterSlice.actions;\r\n\r\nexport const registerUser = (newUser) => async (dispatch) => {\r\n  try {\r\n    const config = { headers: { \"Content-Type\": \"application/json\" } };\r\n    const body = JSON.stringify(newUser);\r\n    await axios.post(\"/api/users\", body, config);\r\n    dispatch(registrationSuccess());\r\n  } catch (err) {\r\n    dispatch(registrationFailure(err.response.data));\r\n  }\r\n};\r\n\r\nexport default RegisterSlice.reducer;\r\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAC9C,OAAOC,KAAK,MAAM,OAAO;AAEzB,MAAMC,YAAY,GAAG;EACnBC,IAAI,EAAE,EAAE;EACRC,KAAK,EAAE,EAAE;EACTC,QAAQ,EAAE,EAAE;EACZC,SAAS,EAAE,EAAE;EACbC,KAAK,EAAE;AACT,CAAC;AAED,MAAMC,aAAa,GAAGR,WAAW,CAAC;EAChCG,IAAI,EAAE,UAAU;EAChBD,YAAY;EACZO,QAAQ,EAAE;IACRC,QAAQ,EAAEA,CAACC,KAAK,EAAEC,MAAM,KAAK;MAC3B,MAAM;QAAEC,KAAK;QAAEC;MAAM,CAAC,GAAGF,MAAM,CAACG,OAAO;MACvCJ,KAAK,CAACE,KAAK,CAAC,GAAGC,KAAK;IACtB,CAAC;IACDE,mBAAmB,EAAGL,KAAK,IAAK;MAC9BA,KAAK,CAACJ,KAAK,GAAG,IAAI;IACpB,CAAC;IACDU,mBAAmB,EAAEA,CAACN,KAAK,EAAEC,MAAM,KAAK;MACtCD,KAAK,CAACJ,KAAK,GAAGK,MAAM,CAACG,OAAO;IAC9B;EACF;AACF,CAAC,CAAC;AAEF,OAAO,MAAM;EAAEL,QAAQ;EAAEM,mBAAmB;EAAEC;AAAoB,CAAC,GAAGT,aAAa,CAACU,OAAO;AAE3F,OAAO,MAAMC,YAAY,GAAIC,OAAO,IAAK,MAAOC,QAAQ,IAAK;EAC3D,IAAI;IACF,MAAMC,MAAM,GAAG;MAAEC,OAAO,EAAE;QAAE,cAAc,EAAE;MAAmB;IAAE,CAAC;IAClE,MAAMC,IAAI,GAAGC,IAAI,CAACC,SAAS,CAACN,OAAO,CAAC;IACpC,MAAMnB,KAAK,CAAC0B,IAAI,CAAC,YAAY,EAAEH,IAAI,EAAEF,MAAM,CAAC;IAC5CD,QAAQ,CAACL,mBAAmB,CAAC,CAAC,CAAC;EACjC,CAAC,CAAC,OAAOY,GAAG,EAAE;IACZP,QAAQ,CAACJ,mBAAmB,CAACW,GAAG,CAACC,QAAQ,CAACC,IAAI,CAAC,CAAC;EAClD;AACF,CAAC;AAED,eAAetB,aAAa,CAACuB,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}