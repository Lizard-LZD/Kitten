{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\nconst initialState = {\n  email: \"\",\n  password: \"\",\n  error: null\n};\nconst LoginSlice = createSlice({\n  name: \"login\",\n  initialState,\n  reducers: {\n    setField: (state, action) => {\n      const {\n        field,\n        value\n      } = action.payload;\n      state[field] = value;\n    },\n    loginSuccess: state => {\n      state.error = null;\n    },\n    loginFailure: (state, action) => {\n      state.error = action.payload;\n    }\n  }\n});\nexport const {\n  setField,\n  loginSuccess,\n  loginFailure\n} = LoginSlice.actions;\n\n// 使用Redux Thunk来处理异步逻辑\nexport const loginUser = loginUser => async dispatch => {\n  try {\n    console.log(loginUser);\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    };\n    const body = JSON.stringify(loginUser);\n    const res = await axios.post(\"/api/auth\", body, config);\n    console.log(res.data);\n    dispatch(loginSuccess());\n  } catch (err) {\n    console.error(err.response.data);\n    dispatch(loginFailure(err.response.data));\n  }\n};\nexport default LoginSlice.reducer;","map":{"version":3,"names":["createSlice","axios","initialState","email","password","error","LoginSlice","name","reducers","setField","state","action","field","value","payload","loginSuccess","loginFailure","actions","loginUser","dispatch","console","log","config","headers","body","JSON","stringify","res","post","data","err","response","reducer"],"sources":["C:/Users/wangz/OneDrive/文档/GitHub/Kitten/frontend/src/Redux/Reducers/LoginSlice.js"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\nimport axios from \"axios\";\r\n\r\nconst initialState = {\r\n    email: \"\",\r\n    password: \"\",\r\n    error: null,\r\n  };\r\n\r\n  const LoginSlice = createSlice({\r\n    name: \"login\",\r\n    initialState,\r\n    reducers: {\r\n      setField: (state, action) => {\r\n        const { field, value } = action.payload;\r\n        state[field] = value;\r\n      },\r\n      loginSuccess: (state) => {\r\n        state.error = null;\r\n      },\r\n      loginFailure: (state, action) => {\r\n        state.error = action.payload;\r\n      },\r\n    },\r\n  });\r\n\r\n  export const { setField, loginSuccess, loginFailure } = LoginSlice.actions;\r\n\r\n// 使用Redux Thunk来处理异步逻辑\r\nexport const loginUser = (loginUser) => async (dispatch) => {\r\n  try {\r\n    console.log(loginUser);\r\n    const config = { headers: { \"Content-Type\": \"application/json\" } };\r\n    const body = JSON.stringify(loginUser);\r\n    const res = await axios.post(\"/api/auth\", body, config);\r\n    console.log(res.data);\r\n    dispatch(loginSuccess());\r\n  } catch (err) {\r\n    console.error(err.response.data);\r\n    dispatch(loginFailure(err.response.data));\r\n  }\r\n};\r\n\r\nexport default LoginSlice.reducer;"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAC9C,OAAOC,KAAK,MAAM,OAAO;AAEzB,MAAMC,YAAY,GAAG;EACjBC,KAAK,EAAE,EAAE;EACTC,QAAQ,EAAE,EAAE;EACZC,KAAK,EAAE;AACT,CAAC;AAED,MAAMC,UAAU,GAAGN,WAAW,CAAC;EAC7BO,IAAI,EAAE,OAAO;EACbL,YAAY;EACZM,QAAQ,EAAE;IACRC,QAAQ,EAAEA,CAACC,KAAK,EAAEC,MAAM,KAAK;MAC3B,MAAM;QAAEC,KAAK;QAAEC;MAAM,CAAC,GAAGF,MAAM,CAACG,OAAO;MACvCJ,KAAK,CAACE,KAAK,CAAC,GAAGC,KAAK;IACtB,CAAC;IACDE,YAAY,EAAGL,KAAK,IAAK;MACvBA,KAAK,CAACL,KAAK,GAAG,IAAI;IACpB,CAAC;IACDW,YAAY,EAAEA,CAACN,KAAK,EAAEC,MAAM,KAAK;MAC/BD,KAAK,CAACL,KAAK,GAAGM,MAAM,CAACG,OAAO;IAC9B;EACF;AACF,CAAC,CAAC;AAEF,OAAO,MAAM;EAAEL,QAAQ;EAAEM,YAAY;EAAEC;AAAa,CAAC,GAAGV,UAAU,CAACW,OAAO;;AAE5E;AACA,OAAO,MAAMC,SAAS,GAAIA,SAAS,IAAK,MAAOC,QAAQ,IAAK;EAC1D,IAAI;IACFC,OAAO,CAACC,GAAG,CAACH,SAAS,CAAC;IACtB,MAAMI,MAAM,GAAG;MAAEC,OAAO,EAAE;QAAE,cAAc,EAAE;MAAmB;IAAE,CAAC;IAClE,MAAMC,IAAI,GAAGC,IAAI,CAACC,SAAS,CAACR,SAAS,CAAC;IACtC,MAAMS,GAAG,GAAG,MAAM1B,KAAK,CAAC2B,IAAI,CAAC,WAAW,EAAEJ,IAAI,EAAEF,MAAM,CAAC;IACvDF,OAAO,CAACC,GAAG,CAACM,GAAG,CAACE,IAAI,CAAC;IACrBV,QAAQ,CAACJ,YAAY,CAAC,CAAC,CAAC;EAC1B,CAAC,CAAC,OAAOe,GAAG,EAAE;IACZV,OAAO,CAACf,KAAK,CAACyB,GAAG,CAACC,QAAQ,CAACF,IAAI,CAAC;IAChCV,QAAQ,CAACH,YAAY,CAACc,GAAG,CAACC,QAAQ,CAACF,IAAI,CAAC,CAAC;EAC3C;AACF,CAAC;AAED,eAAevB,UAAU,CAAC0B,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}